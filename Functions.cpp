#include "Functions.h"
//----------------------------------------------------------------------------------------------------
//! @brief Функция, распечатывающая строку
//!
//! @param[in] *s указатель на распечатываемую строку
//!
//! @return 1, если всё хорошо, EOF, если произошла ошибка
//----------------------------------------------------------------------------------------------------
int my_puts(const char *s)
{
    int i = 0;

    while (*s)
    {
        putc(*s++, stdout);
    }

    if (i == 0)
        return 1;
    else
        return EOF;


}

//----------------------------------------------------------------------------------------------------
//! @brief Функция, которая ищет символ в строке
//!
//! @param[in] *cs указатель на строку, в которой ищут символ
//! @param[in] c искомый символ
//!
//! @return возвращает указатель на искомый символ, если не найден, то nullptr
//----------------------------------------------------------------------------------------------------
char *my_strchr(const char *cs, int c)
{
    int i = 0;

    while (*cs)
    {
        if (*cs == c)
            return (char *) cs;
        else
            cs++;
    }
    return nullptr;
}

//----------------------------------------------------------------------------------------------------
//! @brief Функция, находящая длину строки
//!
//! @param[in] *cs Строка, в которой требуется высчитать длину
//!
//! @return Возвращает длину строки
//----------------------------------------------------------------------------------------------------
size_t my_strlen (const char *cs)
{
    size_t i = 0;

    while (cs[i++] != '\0');

    return i;
}

//----------------------------------------------------------------------------------------------------
//! @brief Функция, которая копирует содержимое строки ct в строку s
//!
//! @param[in] *ct Строка, из которой копируется содержимое
//! @param[out] *s Строка, в которую копируется содержимое
//!
//! @return указатель на строку, в которую скопировалось содержимое другой строки
//----------------------------------------------------------------------------------------------------
char *my_strcpy(char *s, const char *ct)
{
    int i = 0;

    while (*ct)
    {

        *s++ = *ct++;

         i++;
    }

    *s = '\0';

    return s-i;
}

//----------------------------------------------------------------------------------------------------
//! @brief ункция, которая копирует не более n символов из строки ct в строку s
//!
//! @param[in] *ct Строка, из которой копируется содержимое
//! @param[in] n максимальное число скопированных символов
//! @param[out] *s Строка, в которую копируется содержимое
//!
//! @return указатель на строку, в которую скопировалось содержимое другой строки
//----------------------------------------------------------------------------------------------------
char *my_strncpy(char *s, const char *ct, size_t n)
{
    char *ptr = s;

    while (*ct && (n > 0))
    {
        *ptr++ = *ct++;

         n--;
    }

    *ptr = '\0';

    while(n > 0)
    {
        *ptr++ = '\0';

         n--;
    }

    return s;
}

//----------------------------------------------------------------------------------------------------
//! @brief копирует содержимое строки ct в конец строки s
//!
//! @param[in] *ct Строка, из которой копируется содержимое
//! @param[out] *s Строка, в которую копируется содержимое
//!
//! @return указатель на строку, дополненную новым содержимым
//----------------------------------------------------------------------------------------------------
char *my_strcat(char *s, const char *ct)
{
    char *ptr = s + my_strlen(s) - 1;

    while (*ct )
        *ptr++ = *ct++;

    *ptr = '\0';

    return s;
}

//----------------------------------------------------------------------------------------------------
//! @brief копирует не более n символов из ct в s
//!
//! @param[in] *ct Строка, из которой копируется содержимое
//! @param[in] n Максимально число скопированных символов
//! @param[out] *s Строка, в которую копируется содержимое
//!
//! @return указатель на строку, дополненную новым содержимым
//----------------------------------------------------------------------------------------------------
char *my_strncat(char *s, const char *ct, size_t n)
{
    char *ptr = s + my_strlen(s) - 1;

    while (*ct)
    {
        *ptr++ = *ct++;

         n--;

        if (n == 0)
            break;
    }

    *ptr = '\0';

    while ( n > 0)
    {
        *ptr++ = '\0';

         n--;
    }

    return s;
}

//----------------------------------------------------------------------------------------------------
//! @brief сравнивает две строки
//!
//! @param[in] *cs,*ct Сравниваемые строки
//!
//! @return 1, если cs>ct, -1 в обратном случае, 0 при равенстве
//----------------------------------------------------------------------------------------------------
char my_strcmp (const char *cs, const char *ct)
{
    int i = 0;

    while (*cs == *ct)
    {
        if (*cs == '\0')
            return 0;

        cs++;
        ct++;
    }

    if (*cs > *ct)
        return 1;
    else
        return -1;
}

//----------------------------------------------------------------------------------------------------
//! @brief Функция, считывающая строку из файла
//!
//! @param[in] *stream указатель на поток ввода
//! @param[in] n максимальное число считанных файлов
//! @param[out] *s указатель на строку, в которую записано содержимое файла
//!
//! @return указатель на строку, в которую записано содержимое файла
//----------------------------------------------------------------------------------------------------
char *my_fgets(char *s, int n, FILE *stream)
{
    char *ptr = s;

    *ptr++ = fgetc(stream);

    while ((--n>0) && *ptr != EOF)
        {
            *ptr++ = fgetc(stream);
        }

    *ptr = '\0';

    return s;
}

//----------------------------------------------------------------------------------------------------
//! @brief Функция, дуплицирующая содержимое строки
//!
//! @param[in] *s Строка, которую необходимо продублировать
//!
//! @return указатель на строку с дубликатом содержимого
//----------------------------------------------------------------------------------------------------
char *my_strdup (const char *s)
{
    char *p = NULL;
    char *str = NULL;

    p = (char*)calloc(my_strlen(s) + 1, sizeof (char));

    str = p;

    while(*s)
        *p++ = *s++;
    *p = '\0';
    return str;
}

//----------------------------------------------------------------------------------------------------
//! @brief Функция, считывающая строку из stdin
//!
//! @param[in] max максимальное число считанных символов
//! @param[out] *line указатель на строку, в которую записано содержимое stdin
//!
//! @return длину строки
//----------------------------------------------------------------------------------------------------
int getline(char *line, int max)
{
    if (fgets(line, max, stdin) == NULL)
        return 0;
    else
        return strlen(line);
}

